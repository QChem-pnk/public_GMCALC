#!/bin/bash

PS3="
:: Elija una opción > "

clear

source config.sh

#***********
#DEFINITIONS
versionnmb="v1.0.0"

#Programs
calcpr=("GAUSSIAN" "MOPAC")

#Options gaussian
opt_geomst="opt"
freqst="freq"
#Initialize options gaussian
opt_geom="true"
freq="true"

#Options
salidaex="SALIR"
gaussianopt="GAUSSIAN"
mopacopt="MOPAC"
volver="VOLVER"
cambio_t=("Comprobar estado" "Cambiar molécula" "Cambiar método GAUSSIAN"  "Cambiar método MOPAC" "Cambiar TODO")
gaussian_sub=("Gaussian TODO" "Input gaussian" "Input sbatch gaussian" "Lanzar gaussian" "Cambiar opciones GAUSSIAN")
mopac_sub=("MOPAC TODO" "Crear input de MOPAC" "Lanzar MOPAC" "MOPAC para las moleculas que no están hechas" "Ver resultados de MOPAC")
gauss_opt=("Optimización de geometría" "Frecuencias")
mopac_opt=("Por método" "Por molécula")

#Defining colors
dfltc="\e[0m"
ccode="\e[3"
bcode="\e[9"
ncode="\e["
 
black="0m"
red="1m"
green="2m"
yellow="3m"
blue="4m"
purple="5m"
cyan="6m"
white="9m"

colorch=""

last_thing="Nada hecho."
#Number of columns in menu
COLUMNS=0

#***********
#FUNCTIONS

function altcolor {
       #If number is even
       if [ `expr $1 % 2` -eq 0 ]
       then
         #normal colors
         bred="\e[31m"
         bgreen="\e[32m"
         byellow="\e[33m"
         bblue="\e[34m"
         bpurple="\e[35m"
         bcyan="\e[36m"
       else
         #bright colors
         bred="\e[91m"
         bgreen="\e[92m"
         byellow="\e[93m"
         bblue="\e[94m"
         bpurple="\e[95m"
         bcyan="\e[96m"
       fi
}

#Function to check if folder exists
function chkfld {
       if [ ! -d $1 ]
       then
           mkdir $1
       fi
}

#Check if folders exist
for i in $com_fld $com_fld $log_fld $gjf_fld
do
  chkfld $i
done

#Copy .gjf files to gaussview folder
if [ -f $HOME/*.gjf ]
then
	cp *.gjf $gjf_fld 2>/dev/null
fi

#If there's a positional parameter, use it as molecules, if not, ask molec activated
if ! [ "$1" == "" ]
then
   molec=$1
fi

#If there's a second positional parameter, use it as method, if not, ask for method activated
if ! [ "$2" == "" ]
then
   method=$2
   if [ $method = "MP2" ]
   then
      methodlong="MP2/aug-cc-pVTZ"
   fi
fi

#If there's a second positional parameter, use it as method, if not, ask for method activated
if ! [ "$3" == "" ]
then
   methodmop=$3
   methodmoplong=$3
fi
   
#Function to draw the menu
function menugm {
   #Color selection
   case $2 in
     0)
        colorch=$cyan
     ;;
     1)
        colorch=$blue
     ;;
     2)
        colorch=$red
     ;;
     3)
        colorch=$green
     ;;
     4)
        colorch=$yellow
     ;;
     5)
        colorch=$purple
     ;;
     6)
        colorch=$white
     ;;
   esac
   
   #Define sections
   selection[0]="${bcode}${colorch}*            ${ccode}${colorch}MAIN  MENU${bcode}${colorch}            *${dfltc}"
   selection[1]="${bcode}${colorch}*             ${ccode}${colorch}GAUSSIAN${bcode}${colorch}             *${dfltc}"
   selection[2]="${bcode}${colorch}*              ${ccode}${colorch}MOPAC${bcode}${colorch}               *${dfltc}"
   selection[3]="${bcode}${colorch}*        ${ccode}${colorch}MOLECULE  & METHOD${bcode}${colorch}        *${dfltc}"
   selection[4]="${bcode}${colorch}*             ${ccode}${colorch}MOLECULE${bcode}${colorch}             *${dfltc}"
   selection[5]="${bcode}${colorch}*         ${ccode}${colorch}GAUSSIAN  METHOD${bcode}${colorch}         *${dfltc}"
   selection[6]="${bcode}${colorch}*          ${ccode}${colorch}MOPAC  RESULTS${bcode}${colorch}          *${dfltc}"
   selection[7]="${bcode}${colorch}*         ${ccode}${colorch}GAUSSIAN  OPTION${bcode}${colorch}         *${dfltc}"
   
   #All prompts to construct the table
   separ="${bcode}${colorch}*                                  *${dfltc}"
   finln="${bcode}${colorch}************************************${dfltc}"
   creatorln="${bcode}${colorch}*              ${ncode}2;9${black}by PNK${dfltc}${bcode}${colorch}              *${dfltc}"
   programnm="${bcode}${colorch}*              ${ccode}${purple}GMCALC${dfltc}${bcode}${colorch}              *${dfltc}"
   vnmbr="${bcode}${colorch}*              ${ncode}2;3${purple}${versionnmb}${dfltc}${bcode}${colorch}              *${dfltc}"
   selectoptch="${bcode}${colorch}*              ${ccode}${colorch}SELECT${bcode}${colorch}              *${dfltc}"
   mopac2="${bcode}${colorch}*     ${ccode}${colorch}Molecular Orbit  PACkage${bcode}${colorch}     *${dfltc}"
   separi="                                    ${dfltc}"
   
   megaman[0]="\e[34m            ▄▄█▀▀▄    \e[0m"
   megaman[1]="\e[34m          ▄█████▄▄█▄    \e[0m"
   megaman[2]="\e[34m       ▄▄▄▀██████▄▄██    \e[0m"
   megaman[3]="\e[34m    ▄██░░█░█▀░░▄▄▀█░█   ▄▄▄▄\e[0m"
   megaman[4]="\e[34m  ▄█████░░██░░░▀▀░▀░█▀▀██▀▀▀█▀▄\e[0m"
   megaman[5]="\e[34m  █████░█░░▀█░▀▀▀▀▄▀░░░███████▀\e[0m"
   megaman[6]="\e[34m   ▀▀█▄ ██▄▄░▀▀▀▀█▀▀▀▀▀ ▀▀▀▀\e[0m"
   megaman[7]="\e[34m   ▄████████▀▀▀▄▀    \e[0m"
   megaman[8]="\e[34m  ██████░▀▀█▄░░░█▄    \e[0m"
   megaman[9]="\e[34m   ▀▀▀▀█▄▄▀ ██████▄    \e[0m"
   megaman[10]="           █████████    "

   i=$menuslb
   echo -ne "${finln}\n${separ}${megaman[0]}\n${programnm}${megaman[1]}\n${vnmbr}${megaman[2]}\n${creatorln}${megaman[3]}\n${separ}${megaman[4]}\n${selection[$i]}${megaman[5]}"
   #Draw depending on menu
    if [ $i -eq 2 ]
    then
      echo -ne "\n${mopac2}"
    elif [ $i -gt 2 -a $1 -ne 6 ]
    then
      echo -ne "\n${selectoptch}"
    elif [ $i -eq 6 ]
    then
      echo -ne "\n${mopac2}"
    else
      echo -ne "\n${separ}"
    fi
      echo -ne "${megaman[6]}\n${separ}${megaman[7]}\n${finln}${megaman[8]}\n${separi}${megaman[9]}\n"
   #Show molecules and methods
   if [ "$molec" = "" ]
   then
     printf "\e[34m%-10s \e[91m%-36s\e[0m \e[34m%-20s\e[0m\n" "Molécula:" "NINGUNA" ${megaman[10]}
   else
     printf "\e[34m%-10s \e[94m%-36s\e[0m \e[34m%-20s\e[0m\n" "Molécula:" $molec ${megaman[10]}
   fi
   if [ "$methodlong" = "" ]
   then
      printf "\e[36m%-16s \e[91m%-14s\e[0m\n" "Método GAUSSIAN:" "NO SELECCIONADO"
   else
      printf "\e[36m%-16s \e[96m%-14s\e[0m\n" "Método GAUSSIAN:" $methodlong
   fi
   if [ "$methodmoplong" = "" ]
   then
       printf "\e[36m%-16s \e[91m%-18s\e[0m\n" "Método MOPAC:" "NO SELECCIONADO"
   else
       printf "\e[36m%-16s \e[96m%-18s\e[0m\n" "Método MOPAC:" $methodmoplong
   fi
   truebox="\e[42m"
   falsebox="\e[41m"
   
   if [ "$opt_geom" = "true" ]
   then
      opt_geombox=$truebox
   else
      opt_geombox=$falsebox
   fi
   if [ "$freq" = "true" ]
   then
      freqbox=$truebox
   else
      freqbox=$falsebox
   fi


   #Show gaussian method options
   if [ "$molec" = "" ]
   then
      echo -e "\n\e[31mSeleccione la molécula.\e[0m\n"
   elif [ $i -eq 7 -o $i -eq 5 -o $i -eq 1 ]
   then 
      printf "\n\e[92m%12s \e[0m%3s   %4s %3s\n" "Options:    " " _ " "    " " _ "  
      printf "\e[0m%12s |${opt_geombox}%1s\e[0m|   %4s |${freqbox}%1s\e[0m|\n" "   opt geom:" "_" "freq" "_"  
   else
      echo -e "\n\n"
   fi
   #Prompt last thing done
   echo -e "\n\e[36mLOG:\e[0m $last_thing\n"
}

function dummy_del {
        #If dummy exists, remove
        if [ -f dummytxt ]
        then
          rm dummytxt
        fi
}

function exit_c {
	dummy_del
        clear
        for i in `seq 0 9`;do
             echo -e "${megaman[$i]}"
        done
        echo -e "\e[34m${megaman[10]}\e[0m"
        echo -e "\n$last_thing"
	echo -e "\nEl programa se ha \e[33minterrumpido\e[0m."
}

trap exit_c EXIT

#Check files in folder with a determined extension
function chkf_d {
        ghm=""
        i=-1
        while [ $i -lt $3 ]       
        do
          ghm=$ghm/*
          i=`expr $i + 1`
        done
        chk_path="${1}${ghm}.${2}"
        #Anyfile var is number of .$2 files in $1 directory
	anyfile=`ls $chk_path | wc -w`
        #If there's files
	if [ $anyfile -gt 0 ]
	then
            #Save list of names in dummytxt
	    ls $chk_path | awk -F . '{print $1}' | awk -F / '{print $NF}' | awk -F _ '{print $1}' >> dummytxt 2>/dev/null
	fi
}

#Function to call the menu
function call_menuopt {
    opt_array=()
    opt_array+=("$salidaex")
    if ! [ -z $molec ]
    then
       case $state in
         0)
           if [ ! -z $method ]
           then
             opt_array+=("$gaussianopt")
             if [ ! -z "$methodmop" ]
             then
                 opt_array+=("$mopacopt")
             fi
             colormenuv=0
             menuslb=0
            else
             colormenuv=3
             menuslb=3
            fi

         ;;
         1)
           menuslb=1
           opt_array+=("$volver")
           if [ ! -z "$method" ]
           then
             opt_array+=("${gaussian_sub[@]}")
             colormenuv=1
            else
             colormenuv=3
          fi
         ;;
         2)
           menuslb=2
           opt_array+=("$volver")
           if [ ! -z "$method" ]
           then
             if [ ! -z "$methodmop" ]
             then
               opt_array+=("${mopac_sub[@]}")
            fi
             colormenuv=2
            else
             colormenuv=3
           fi
         ;;
         3)
           menuslb=7
           opt_array+=("$volver")
           opt_array+=("${gauss_opt[@]}")
           colormenuv=1
         ;;
         4)
           menuslb=6
           opt_array+=("$volver")
           opt_array+=("${mopac_opt[@]}")
           colormenuv=2
         ;;
       esac
    else
       colormenuv=3
       menuslb=3
    fi
      opt_array+=("${cambio_t[@]}")
}

function get_all_molecules {
        dummy_del
        case $1 in 
        1 | 0)
          chkf_d ${com_fld} com 0      
          chkf_d ${gjf_fld} gjf 0
	;;&
        2 | 0)
          chkf_d ${log_fld} log 0
          for i in arc out mop
          do
             chkf_d ${mopac_fld} $i 1
          done
        ;;
        esac
}

#Function select molecule
function askingmol {
#Loop to chose molecule
while [ 0 ]
do
  clear
  menutmp=$menuslb
  menuslb=3
  menugm 4 3
  echo -e "Introduce la molécula o escribe \e[31m'0'\e[0m para seleccionar una molécula existente\n"
  read molec
  if [ $molec = "0" ]
  then
        get_all_molecules $1
        #if dummytext is bigger than 0
	if [ -s dummytxt ]
	then
           #files is an array with all the molecules
           files=()
           files=`sort -u dummytxt`
           files+=("TODAS")	
	  while [ 0 ]
	  do
           #initialize i
	   i=1
	   echo -e "\nMoléculas disponibles:\n"

           #Option to exit
	   echo "0 - SALIR"

	   # for every molecule in var files
	   for j in ${files[@]}
	   do
             #print number - molecule
	     echo "$i - $j"
             #new array
             file[i]=$j
	     i=$(( i + 1 ))
  	   done
           #Input file name
	   echo -e "\nIntroduce el número del archivo o introduce 0 para continuar.\n"
	   read input
           
           #If 0, exit
	   if [ "$input" = 0 ]
	   then 
		molec=""
		break
	   fi
           
           #Set molec name by input tmp number
           molec=${file[$input]}
           #If number belonged to a molec
	   if [ ! -z "$molec" ]
	   then
      	     dummy_del
 	     break
	   fi
           #If it didn't correspond, keep looping
	   echo -e "\nNo se ha introducido un valor válido.\n"
	  done
        #If there's no molecules
	else
           echo -e "\n\e[31mNo hay moléculas disponibles.\e[0m Volviendo al menú.\n"
	   dummy_del
	   sleep 2
	   break 
	fi
   fi
   if [ "$input" = [aA][lL][lL] ]
   then
      molec="TODAS"
   fi

   #Display chosen molecule
   if [ "$input" = 0 ]
   then
     echo -e "\nNo se ha seleccionado\e[32m molécula\e[0m.\n"
     break 
   else
     echo -e "\nSe ha seleccionado la molécula \e[94;5m${molec}\e[0m.\n"
     break
   fi

 done
}


#Function to change molecule. 0 Gaussian - 1 MOPAC
function askingmethod {
#Ask method menu      
  clear
  menutmp=$menuslb
  menuslb=3
  menunm=`expr $1 + 5` 
  if [ $1 = 0 ]
  then
     menugm $menunm 1
  else
     menugm $menunm 2
  fi
  echo -e "Introduce el método para ${calcpr[$1]} o escribe \e[31m'0'\e[0m para seleccionar de una lista.\n"
  read methodtmp
  #If select is introduced
  if [ $methodtmp = "0" ]
  then
     while [ 0 ]
     do
        i=1

	echo -e "\nMétodos habituales:\n"

	echo "0 - SALIR"
        for j in ${metodos[@]}
        do
          echo "$i - $j"
          metod[i]=$j
          i=$(( i + 1 ))
        done

        echo -e "\nIntroduce el número correspondiente al método deseado o introduce 0 para continuar.\n"
        read input
	if [ "$input" = 0 ]
	then 
	   methodtmp=""
	   break
	fi
        #Set method name by input tmp number
        methodtmp=${metod[$input]}
        #If number belonged to a method
	if [ ! -z "$methodtmp" ]
	then
 	  break
	fi
      done
  fi

  #Display selected method, or none
  if [ "$input" = 0 ]
  then
    echo -e "\nNo se ha seleccionado \e[32mmétodo\e[0m.\n"
  else
    echo -e "\nSe ha seleccionado el método para ${calcpr[$1]}: \e[96;5m${methodtmp}\e[0m\n"
  fi
    #Change method MP2 for complete name
  if [ $methodtmp = "MP2" ]
  then
     methodtmp="MP2/aug-cc-pVTZ"
    
  elif [ $methodtmp = "MP2/aug-cc-pVTZ" ]
  then
     methodtmp="MP2"
     methodtmplong="MP2/aug-cc-pVTZ"
  else
     methodtmplong=$methodtmp
  fi
  if [ "$1" = 0 ]
  then
     method=$methodtmp
     methodlong=$methodtmplong
  else 
     methodmop=$methodtmp
     methodmoplong=$methodtmplong
  fi

}

#Function to call error
function inperr {
         echo -e "\n\e[5;31mERROR\e[0m\nNo existe esa opción."
         sleep 2
         echo -ne "\n\r\e[5mElija un número del menú."
         sleep 1
         echo -ne "\r\e[K \e[0m"
         break
}

##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
#*********************************
#            GAUSSIAN            *
#*********************************

#Function input de gaussian
function gaussian_input {
		 if [ -f ${gjf_fld}/${molec}.gjf ]
		 then
                    output=${com_fld}/${molec}_${method}.com
                    echo -e "%chk=${molec}.chk\n#p ${methodlong} $options_gaus\n\nOptimizing geometry of Cl at ${methodlong}\n" > ${output}
                    awk 'NR >= 6' ${gjf_fld}/${molec}.gjf | sed -e "s/\r//g" >> ${output}
                    blank=`tail -c 1 $output`
		    if [ -z "$blank" ]
		    then
			echo "" >> ${output}
	            fi
		 else
		  echo -e "\nNo existe un archivo de entrada válido para crear el input de Gaussian.\n"
		 fi
                  usedmolec="\e[94m$molec\e[0m"
                  last_thing="Se ha generado el input de \e[34mGAUSSIAN\e[0m para la molécula $usedmolec"
                  echo -e $last_thing
}

#Function to generate gaussian sbatch
function gaussian_sbatch {
                  output=./launchgaussian_${molec}_${method}.bash
		  echo -e "#!/bin/bash\n\n" > ${output}
                  # Load gaussian module
                  echo -e "module load gaussian/gaussian\n\n" >> ${output}

                  #Creating working directory
                  echo "mkdir /scratch/$USER/$molec" >> ${output}
                  echo -e "cd /scratch/$USER/$molec\n\n"  >> ${output}

                  # Execution line
                  echo -e "g16 <${com_fld}/${molec}_${method}.com  > ${log_fld}/${molec}_${method}.log\n\n"  >> ${output}

                  # Cleaning
                  echo -e "rm -rf /scratch/$USER/$molec" >> ${output}
                  usedmolec="\e[94m$molec\e[0m"
                  last_thing="Se ha generado el sbatch de \e[34mGAUSSIAN\e[0m para la molécula $usedmolec"
                  echo -e $last_thing
}

#Function to launch gaussian
function gaussian_launch {
                  output=./launchgaussian_${molec}_${method}.bash
   	          launch_sbatch ${output}
   	          rm ${output}
                  usedmolec="\e[94m$molec\e[0m"
                  last_thing="Se ha lanzado \e[34mGAUSSIAN\e[0m para la molécula $usedmolec"
                  echo -e $last_thing
}

#function to create options for gaussian
function gaussian_opts {
        options_gaus=""
	if $opt_geom
        then
           options_gaus="$options_gaus $opt_geomst"
        fi
	if $freq
        then
           options_gaus="$options_gaus $freqst"
        fi
}

##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################
#*********************************
#              MOPAC             *
#*********************************

#Function to generato mopac input
function mopac_input {
                  #Script to get the last geometry from a g09 calculation a write it in
                  filemop=${mopac_fld}/${methodmop}
                  chkfld $filemop
                  #mopac input format

                  file=${log_fld}/${molec}_${method}.log
                  output=${mopac_fld}/${methodmop}/${molec}_${methodmop}.mop

                  #Number of atoms
                  nat=`grep -m 1 'NAtoms=' $file | awk '{print $2}'`
                  #Line of last Standard orientation +4 (Donde empiezan las coordenadas
                  line=`awk '/Standard orientation/ {line=NR} END{print line}' $file`

                  echo CHARGE=0 ${methodmop} PRECISE XYZ > ${output}
                  echo Fragmento: ${molec}.log >> ${output}
                  echo Parto de la geometría optimizada con $method >> ${output}

                  #Imprime las coordenadas en formato de mopac
                  awk '{if (NR > '$line'+4 && NR <= '$line'+4+'$nat') printf "%-4s %12.6f %2s %12.6f %2s %12.6f %2s \n", $2, $4, 1, $5, 1, $6, 1}' $file >> ${output}

                  echo >> ${output}
                  echo FORCE OLDGEO CHARGE=0 ${methodmop} >> ${output}
                  usedmolec="\e[94m$molec\e[0m"
                  last_thing="Se ha generado el input de \e[31mMOPAC\e[0m para la molécula $usedmolec"
                  echo -e $last_thing
    }

#Function to launch mopac
function mopac_launch {
                  output=launchmop_${molec}_${methodmop}.sh
                  echo -e "#!/bin/bash\n\n#SBATCH --ntasks=1\n#SBATCH --account=emtccm_serv\n#SBATCH --partition=emtccm\n#SBATCH --job-name=test\n#SBATCH --time=3:00:00\n\nmodule load mopac/2016\n#run the job\n" > ${output}
                  #cp launchmop.sh launchmop_${1}_${2}.sh
                  echo "MOPAC2016.exe ${mopac_fld}/${methodmop}/${molec}_${methodmop}.mop" >> ${output}
                  launch_sbatch ${output}
                  rm ${output}
                  usedmolec="\e[94m$molec\e[0m"
                  last_thing="Se ha lanzado \e[31mMOPAC\e[0m para la molécula $usedmolec"
                  echo -e $last_thing
}


##################################
##################################
##################################
##################################
##################################
##################################
##################################
##################################

bmtop1="__________"
bmtop2="________________"
bmtop3="_________________"

#Function to check results per molecule
function chk_resmop_mol {
        dummy_del
        readarray -t methodres < <(find ${mopac_fld} -mindepth 1 -maxdepth 1 -type d -printf '%P\n')
        fin=`expr ${#methodres[*]} - 1`

        buscaen="TOTAL ENERGY"
        buscazero="ZERO"
        totalenergy=()
        zeroenergy=()

        mollen=`expr ${#molec} + 2`
        if [ `expr ${mollen} % 2` = 0 ]
        then
           unspace=" "
        else
           unspace=""
        fi
        mollen=`expr ${mollen} / 2`
        spaces=""
        
        for i in `seq $mollen 17`;do
          spaces=" $spaces"
        done

        printf " %10s_%16s_%17s\n" $bmtop1 $bmtop2 $bmtop3 
        printf "|%10s %16s %17s|\n"
        printf "|${spaces}\e[0m\e[32;1m%s${spaces}\e[0m|\n" "MOLÉCULA:${unspace} $molec"
        printf "|%10s_%16s_%17s|\n" $bmtop1 $bmtop2 $bmtop3
        printf "|%10s|%16s|%17s|\n"
        printf "|  \e[34;1m%-6s\e[0m  |  \e[33;1m%-12s\e[0m  |   \e[36;1m%-11s   \e[0m|\n" "METODO" "TOTAL ENERGY" "ZERO POINT"
        printf "|%10s|%16s|%17s|\n" $bmtop1 $bmtop2 $bmtop3
        printf "|%10s|%16s|%17s|\n"
        i=0
        for i in `seq 0 $fin` 
        do
           file=${mopac_fld}/${methodres[$i]}/${molec}_${methodres[$i]}.out
              totalenergy[$i]=$(grep "${buscaen}" ${file} > /dev/null 2>&1 && grep "${buscaen}" ${file} | awk '{printf $4}' )
              zeroenergy[$i]=$(grep "${buscazero}" ${file} > /dev/null 2>&1 && grep "${buscazero}" ${file} | awk '{printf $4}' | cut -d ' ' -f 1)
           altcolor "$i"  
           if [ -f $file ]
           then
             if ! [ "${zeroenergy[$i]}" = "" ]
             then
                printf "| ${bblue}%-8s \e[0m| ${bpurple}%14s\e[0m | ${bcyan}%15s \e[0m|\n" "${methodres[$i]}" "${totalenergy[$i]} EV" "${zeroenergy[$i]} KCAL/MOL"
             else
                printf "| ${bblue}%-8s \e[0m| ${bpurple}%14s\e[0m |    ${bred}%12s \e[0m|\n" "${methodres[$i]}" "${totalenergy[$i]} EV" "NO APLICABLE"
             fi
           else
             printf "| ${bblue}%-8s \e[0m|   ${bred}%12s\e[0m |    ${bred}%12s \e[0m|\n" "${methodres[$i]}" "NO HAY DATOS" "NO HAY DATOS"
           fi
           if ! [ $i = $fin ]
           then
              printf "|%10s|%15s|%16s|\n" "----------" "----------------" "-----------------"
           fi
        done
        printf "|%10s|%16s|%17s|\n" $bmtop1 $bmtop2 $bmtop3
        echo -e "\nPresione una tecla para continuar"
        read input
        dummy_del
        break        

}

#Function to check results per method
function chk_resmop_method {
        dummy_del
        rslt_fld=${mopac_fld}/${methodmop}
        file=${rslt_fld}/*.out
        chkf_d ${rslt_fld} out 0 
        moleculas=`sort -u dummytxt`
        fin=`wc -l dummytxt | awk '{printf $1}'`
        buscaen="TOTAL ENERGY"
        buscazero="ZERO"

        totalenergy=()
        zeroenergy=()

        printf " %10s_%16s_%17s\n" $bmtop1 $bmtop2 $bmtop3 
        printf "|%10s %16s %17s|\n"
        printf "|                 \e[0m\e[32;1m%-12s                 \e[0m|\n" "MÉTODO: $methodmop"
        printf "|%10s_%16s_%17s|\n" $bmtop1 $bmtop2 $bmtop3
        printf "|%10s|%16s|%17s|\n"
        printf "| \e[34;1m%-8s\e[0m |  \e[33;1m%-12s\e[0m  |   \e[36;1m%-11s   \e[0m|\n" "MOLÉCULA" "TOTAL ENERGY" "ZERO POINT"
        printf "|%10s|%16s|%17s|\n" $bmtop1 $bmtop2 $bmtop3
        printf "|%10s|%16s|%17s|\n"
        i=0
        fin=`expr $fin - 1`
        for moleci in $moleculas 
        do
           file=${rslt_fld}/${moleci}_${methodmop}.out
           totalenergy[$i]=$(grep "${buscaen}" ${file} > /dev/null 2>&1 && grep "${buscaen}" ${file} | awk '{printf $4}' ) 
           zeroenergy[$i]=$(grep "${buscazero}" ${file} > /dev/null 2>&1 && grep "${buscazero}" ${file} | awk '{printf $4}' | cut -d ' ' -f 1) 
           altcolor "$i"  
           if [ -f $file ]
           then
             if ! [ "${zeroenergy[$i]}" = "" ]
             then
                printf "| ${bblue}%-8s \e[0m| ${bpurple}%14s\e[0m | ${bcyan}%15s \e[0m|\n" "$moleci" "${totalenergy[$i]} EV" "${zeroenergy[$i]} KCAL/MOL"
             else
                printf "| ${bblue}%-8s \e[0m| ${bpurple}%14s\e[0m |    ${bred}%12s \e[0m|\n" "$moleci" "${totalenergy[$i]} EV" "NO APLICABLE"
             fi
           else
                printf "| ${bblue}%-8s \e[0m|   ${bred}%12s\e[0m |    ${bred}%12s \e[0m|\n" "$moleci" "NO HAY DATOS" "NO HAY DATOS"
           fi
           if ! [ $i = $fin ]
           then
              printf "|%10s|%15s|%16s|\n" "----------" "----------------" "-----------------"
           fi
           i=`expr $i + 1`
        done
        printf "|%10s|%16s|%17s|\n" $bmtop1 $bmtop2 $bmtop3
        echo -e "\nPresione una tecla para continuar"
        read input
        dummy_del
        break        
}

#Funtion to finish and echo
function completecho {
		  echo -e "\n\e[5;32mCompletado\e[0m"
                  echo -e "\nPresione una tecla para continuar"
                  read input
		  clear
		  break
}

#Do for all molecules
function allmol_gauss {
       case $1 in
          0 | 1)
             chkf_d ${gjf_fld} gjf 0
             dummy='dummytxt'
             while read molec; do 
                gaussian_input
             done < $dummy
          ;;&
          0 | 2 | 3)
             chkf_d ${com_fld} log 0
             dummy='dummytxt'
          ;;&
          0 | 2)
             while read p; do 
                gaussian_sbatch
             done < $dummy
          ;;&
          0 | 3)
             while read p; do 
                gaussian_launch
             done < $dummy
          ;;
      esac
      rm dummytxt
      molec="TODAS"
}



#Hacer todas las moleculas en mopac
function allmol_mop {
          chkf_d ${log_fld} log 0
          dummy='dummytxt'
          
          while read molec; do 
          case $1 in
          0 | 1)
          mopac_input
          ;;&
          0 | 2)
          mopac_launch
          ;;
          esac
          done < $dummy
          rm dummytxt
          molec="TODAS"
}

#Hacer las moleculas que no estan ya en mopac
function allnotdonemol_mop {
          chkf_d ${log_fld} log 0
          dummy='dummytxt'
          molectmp=$molec
          while read molec; do 
          if ! [ -f ${mopac_fld}/${methodmop}/${molec}_${methodmop}.out ]
          then
            case $1 in
            0 | 1)
            mopac_input
            ;;&
            0 | 2)
            mopac_launch
          ;;
          esac
          fi
          done < $dummy
          rm dummytxt
          molec=$molectmp
}

#Function to check what mólecules are completed 
function check_status {
   
   printf " %11s__%3s__%3s__%3s__%3s__%3s__%3s_ \n" "___________" "___" "___" "___" "___" "___" "___" 
   printf "|    \\MET\e[4mHOD\e[0m||%3s||%3s||%3s||%3s||%3s||%3s||\n" 
   printf "|     \\ |\e[4mG|M\e[0m||%3s||%3s||%3s||%3s||%3s||%3s||\n" ${shmetodos[@]}
   printf "|\e[4m%11s\e[0m||%3s||%3s||%3s||%3s||%3s||%3s||\n" "MOLEC \    " "___" "___" "___" "___" "___" "___"

shmetodos=("MP2" "AM1" "PM3" "PM6" "PM7" "RM1")
          buscagaus="Normal termination of Gaussian"
          buscamopac="JOB ENDED NORMALLY"
          dummy_del
          get_all_molecules 0        
          moleculas=`sort -u dummytxt`
          
          for ci in ${moleculas[*]}
          do 
              str="|\e[4m%-11s\e[0m||"
             # for cj in "MP2" "AM1" "PM3" "PM6" "PM7" "RM1" 
              for cj in ${shmetodos[*]} 
              do
                 if [ -f ${log_fld}/${ci}_${cj}.log ]
                 then
                     tail -n 1 ${log_fld}/${ci}_${cj}.log | grep "${buscagaus}" > /dev/null 2>&1 && str="${str}\e[42m%1s\e[0m|" || str="${str}\e[41m%1s\e[0m|"
                 else
                     str="${str}%1s|"
                 fi
                 if [ -f ${mopac_fld}/${cj}/${ci}_${cj}.out ]
                 then
                     grep "${buscamopac}" ${mopac_fld}/${cj}/${ci}_${cj}.out > /dev/null 2>&1 && str="${str}\e[42m%1s\e[0m||" || str="${str}\e[41m%1s\e[0m||"
                 else
                     str="${str}%1s||"
                 fi
              done
              printf "${str}\n" "$ci" "_" "_" "_" "_" "_" "_" "_" "_" "_" "_" "_" "_"
          done 
        echo -e "\nPresione una tecla para continuar"
        read input
        break        
}




#*********************************
#*********************************
#           SCRIPT START         *
#*********************************
#*********************************

state=0
while [ 0 ]
do
   dummy_del
   clear
   gaussian_opts
   call_menuopt
   menugm $state $colormenuv 
   select opciones in "${opt_array[@]}"
   do
    case $opciones in
      
      #Main menu options
      "GAUSSIAN")
        state=1
        clear
        break 
      ;;

      "MOPAC")
        state=2
        clear
        break
      ;;

      "Gaussian TODO"|"Input gaussian")
        if ! [ $molec = "TODAS" ]
        then
          gaussian_input
        else
          allmol_gauss 1
        fi
      ;;&
        "Gaussian TODO" | "Input sbatch gaussian")
        if ! [ $molec = "TODAS" ]
        then
          gaussian_sbatch
        else
          allmol_gauss 2
        fi
      ;;&
      "Gaussian TODO" | "Lanzar gaussian")
        if ! [ $molec = "TODAS" ]
        then
          gaussian_launch
        else
          allmol_gauss 3
        fi
      ;;&
      "Gaussian TODO" | "Input gaussian" | "Input sbatch gaussian" | "Lanzar gaussian")
          completecho
      ;;
              
      "MOPAC TODO" | "Crear input de MOPAC")
        if ! [ $molec = "TODAS" ]
        then
          mopac_input
        else
          allmol_mop 1
        fi
      ;;&
      "MOPAC TODO" | "Lanzar MOPAC")
        if ! [ $molec = "TODAS" ]
        then
          mopac_launch
        else
          allmol_mop 2
        fi
      ;;&
      "MOPAC TODO" | "Crear input de MOPAC" | "Lanzar MOPAC")
          completecho
      ;;
      "MOPAC para las moleculas que no están hechas")
          allnotdonemol_mop 0
          completecho
      ;;
      
      "Ver resultados de MOPAC")
        state=4
	clear
        break
      ;;
      "Comprobar estado")
          check_status
      ;;
      "Cambiar molécula" | "Cambiar TODO")
         askingmol 0
      ;;&

      "Cambiar método GAUSSIAN" | "Cambiar TODO")
         askingmethod 0
      ;;&

      "Cambiar método MOPAC" | "Cambiar TODO")
         askingmethod 1
      ;;&

      "Cambiar molécula" | "Cambiar método GAUSSIAN" | "Cambiar método MOPAC" | "Cambiar TODO")
	clear
        menuslb=$menustmp
        break 
      ;;

      "Cambiar opciones GAUSSIAN")
        state=3
	clear
        menuslb=7
        break
      ;;
      
      "Optimización de geometría")
        if [ $opt_geom = "false" ]
        then
           opt_geom="true"
        else
           opt_geom="false"
        fi        
        clear
        break
      ;;
      "Frecuencias")
        if [ $freq = "false" ]
        then
           freq="true"
        else
           freq="false"
        fi        
        clear
        break
      ;;
      "Por método")
         chk_resmop_method
      ;;
      "Por molécula")
         chk_resmop_mol
      ;;       
      
      SALIR)
        clear
      	dummy_del
        exit
      ;;

      "VOLVER")
        if [ $state -eq 3 ]
        then
          state=1
        menuslb=1
        elif [ $state -eq 4 ]
        then
          state=2
        menuslb=2
        else
          state=0
        menuslb=0
        fi
        clear
        break  
      ;;
      *)
        inperr
      ;;   
    esac
   done
 
done

